{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Convolutional variational autoencoder with PyMC3 and Keras\n",
    "\n",
    "Last update: 5 November, 2016\n",
    "\n",
    "(c) Taku Yoshioka"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this document, I will show how autoencoding variational Bayes (AEVB) works in PyMC3's automatic differentiation variational inference (ADVI). The example here is borrowed from [Keras example](https://github.com/fchollet/keras/blob/master/examples/variational_autoencoder_deconv.py), where convolutional variational autoencoder is applied to the MNIST dataset. The network architecture of the encoder and decoder are completely same. However, PyMC3 allows us to define the probabilistic model, which combines the encoder and decoder, in the way by which other general probabilistic models (e.g., generalized linear models), rather than directly implementing of Monte Carlo sampling and the loss function as done in the Keras example. Thus I think the framework of AEVB in PyMC3 can be extended to more complex models such as [latent dirichlet allocation](https://taku-y.github.io/notebook/20160928/lda-advi-ae.html). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "NOTE: This notebook ran with my folk of PyMC3 https://github.com/taku-y/pymc3/tree/advi_refactor. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For using Keras with PyMC3, we need to choose [Theano](http://deeplearning.net/software/theano/) Theano as the backend of Keras. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "IPython.notebook.set_autosave_interval(0)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Autosave disabled\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using Theano backend.\n"
     ]
    }
   ],
   "source": [
    "%autosave 0\n",
    "%matplotlib inline\n",
    "import sys, os\n",
    "sys.path.insert(0, os.path.expanduser('~/work/git/github/Theano/Theano'))\n",
    "sys.path.insert(0, os.path.expanduser('~/work/git/github/taku-y/pymc3'))\n",
    "os.environ['KERAS_BACKEND'] = 'theano'\n",
    "\n",
    "from theano import config\n",
    "config.floatX = 'float32'\n",
    "config.optimizer = 'fast_compile'\n",
    "\n",
    "from collections import OrderedDict\n",
    "from keras.layers import InputLayer, BatchNormalization, Dense, Convolution2D, Deconvolution2D, Activation, Flatten, Reshape\n",
    "import numpy as np\n",
    "import pymc3 as pm\n",
    "from pymc3.variational import advi_minibatch\n",
    "from theano import shared, config, function, clone, pp\n",
    "import theano.tensor as tt\n",
    "import keras\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.gridspec as gridspec\n",
    "import seaborn as sns\n",
    "\n",
    "from keras import backend as K\n",
    "K.set_image_dim_ordering('th')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load images\n",
    "MNIST dataset can be obtained by [scikit-learn API](http://scikit-learn.org/stable/datasets/). The dataset contains images of digits. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['data', 'COL_NAMES', 'DESCR', 'target'])\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import fetch_mldata\n",
    "mnist = fetch_mldata('MNIST original')\n",
    "print(mnist.keys())\n",
    "data = mnist['data'].reshape(-1, 1, 28, 28).astype('float32')\n",
    "data /= np.max(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Use Keras\n",
    "We define a utility function to get parameters from Keras models. Since we have set the backend to Theano, parameter objects are obtained as shared variables of Theano. \n",
    "\n",
    "In the code, 'updates' are expected to include update objects (dictionary of pairs of shared variables and update equation) of scaling parameters of batch normalization. While not using batch normalization in this example, if we want to use it, we need to pass these update objects as an argument of `theano.function()` inside the PyMC3 ADVI function. The current version of PyMC3 does not support it, it is easy to modify (I want to send PR in future). \n",
    "\n",
    "The learning phase below is used for Keras to known the learning phase, training or test. This information is important also for batch normalization. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, BatchNormalization\n",
    "\n",
    "def get_params(model):\n",
    "    \"\"\"Get parameters and updates from Keras model\n",
    "    \"\"\"\n",
    "    shared_in_updates = list()\n",
    "    params = list()\n",
    "    updates = dict()\n",
    "    \n",
    "    for l in model.layers:\n",
    "        attrs = dir(l)\n",
    "        # Updates\n",
    "        if 'updates' in attrs:\n",
    "            updates.update(l.updates)\n",
    "            shared_in_updates += [e[0] for e in l.updates]\n",
    "        \n",
    "        # Shared variables\n",
    "        for attr_str in attrs:\n",
    "            attr = getattr(l, attr_str)\n",
    "            if type(attr) is tt.sharedvar.TensorSharedVariable:\n",
    "                if attr is not model.get_input_at(0):\n",
    "                    params.append(attr)\n",
    "    \n",
    "    return list(set(params) - set(shared_in_updates)), updates\n",
    "\n",
    "# This code is required when using BatchNormalization layer\n",
    "keras.backend.theano_backend._LEARNING_PHASE = \\\n",
    "    shared(np.uint8(1), name='keras_learning_phase')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Encoder and decoder"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we define the convolutional neural network for encoder using Keras API. This function returns a CNN model given the shared variable representing observations (images of digits), the dimension of latent space, and the parameters of the model architecture. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def cnn_enc(xs, latent_dim, nb_filters=64, nb_conv=3, intermediate_dim=128):\n",
    "    \"\"\"Returns a CNN model of Keras.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    xs : theano.tensor.sharedvar.TensorSharedVariable\n",
    "        Input tensor.\n",
    "    latent_dim : int\n",
    "        Dimension of latent vector.\n",
    "    \"\"\"\n",
    "    input_layer = InputLayer(input_tensor=xs, \n",
    "                             batch_input_shape=xs.get_value().shape)\n",
    "    model = Sequential()\n",
    "    model.add(input_layer)\n",
    "    \n",
    "    cp1 = {'border_mode': 'same', 'activation': 'relu'}\n",
    "    cp2 = {'border_mode': 'same', 'activation': 'relu', 'subsample': (2, 2)}\n",
    "    cp3 = {'border_mode': 'same', 'activation': 'relu', 'subsample': (1, 1)}\n",
    "    cp4 = cp3\n",
    "    \n",
    "    model.add(Convolution2D(1, 2, 2, **cp1))\n",
    "    model.add(Convolution2D(nb_filters, 2, 2, **cp2))\n",
    "    model.add(Convolution2D(nb_filters, nb_conv, nb_conv, **cp3))\n",
    "    model.add(Convolution2D(nb_filters, nb_conv, nb_conv, **cp4))\n",
    "    model.add(Flatten())\n",
    "    model.add(Dense(intermediate_dim, activation='relu'))\n",
    "    model.add(Dense(2 * latent_dim))\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we define a utility class for encoders. This class does not depend on the architecture of the encoder except for input shape (`tensor4` for images), so we can use this class for various encoding networks. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "class Encoder:\n",
    "    \"\"\"Encode observed images to variational parameters (mean/std of Gaussian).\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    xs : theano.tensor.sharedvar.TensorSharedVariable\n",
    "        Placeholder of input images. \n",
    "    dim_hidden : int\n",
    "        The number of hidden variables. \n",
    "    net : Function\n",
    "        Returns \n",
    "    \"\"\"\n",
    "    def __init__(self, xs, dim_hidden, net):\n",
    "        model = net(xs, dim_hidden)\n",
    "        \n",
    "        self.model = model\n",
    "        self.xs = xs\n",
    "        self.out = model.get_output_at(-1)\n",
    "        self.means = self.out[:, :dim_hidden]\n",
    "        self.lstds = self.out[:, dim_hidden:]\n",
    "        self.params, self.updates = get_params(model)\n",
    "        self.enc_func = None\n",
    "        self.dim_hidden = dim_hidden\n",
    "        \n",
    "    def _get_enc_func(self):\n",
    "        if self.enc_func is None:\n",
    "            xs = tt.tensor4()\n",
    "            means = clone(self.means, {self.xs: xs})\n",
    "            lstds = clone(self.lstds, {self.xs: xs})\n",
    "            self.enc_func = function([xs], [means, lstds])\n",
    "            \n",
    "        return self.enc_func\n",
    "    \n",
    "    def encode(self, xs):\n",
    "        # Used in test phase\n",
    "        keras.backend.theano_backend._LEARNING_PHASE.set_value(np.uint8(0))\n",
    "        \n",
    "        enc_func = self._get_enc_func()\n",
    "        means, _ = enc_func(xs)\n",
    "        \n",
    "        return means\n",
    "\n",
    "    def draw_samples(self, xs, n_samples=1):\n",
    "        \"\"\"Draw samples of hidden variables based on variational parameters encoded.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        xs : numpy.ndarray, shape=(n_images, 1, height, width)\n",
    "            Images.\n",
    "        \"\"\"\n",
    "        # Used in test phase\n",
    "        keras.backend.theano_backend._LEARNING_PHASE.set_value(np.uint8(0))\n",
    "\n",
    "        enc_func = self._get_enc_func()\n",
    "        means, lstds = enc_func(xs)\n",
    "        means = np.repeat(means, n_samples, axis=0)\n",
    "        lstds = np.repeat(lstds, n_samples, axis=0)\n",
    "        ns = np.random.randn(len(xs) * n_samples, self.dim_hidden)\n",
    "        zs = means + np.exp(lstds) * ns\n",
    "        \n",
    "        return ns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In a similar way, we define the decoding network and a utility class for decoders. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def cnn_dec(zs, minibatch_size, nb_filters=64, nb_conv=3, dim_hidden=100, output_shape=(1, 28, 28)):\n",
    "    \"\"\"Returns a CNN model of Keras.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    zs : theano.tensor.var.TensorVariable\n",
    "        Input tensor.\n",
    "    \"\"\"\n",
    "    input_layer = InputLayer(input_tensor=zs, \n",
    "                             batch_input_shape=zs.tag.test_value.shape)\n",
    "    model = Sequential()\n",
    "    model.add(input_layer)\n",
    "        \n",
    "    model.add(Dense(dim_hidden, activation='relu'))\n",
    "    model.add(Dense(nb_filters * 14 * 14, activation='relu'))\n",
    "    \n",
    "    cp1 = {'border_mode': 'same', 'activation': 'relu', 'subsample': (1, 1)}\n",
    "    cp2 = cp1\n",
    "    cp3 = {'border_mode': 'valid', 'activation': 'relu', 'subsample': (2, 2)}\n",
    "    cp4 = {'border_mode': 'valid', 'activation': 'sigmoid'}\n",
    "\n",
    "    output_shape_ = (minibatch_size, nb_filters, 14, 14)\n",
    "    model.add(Reshape(output_shape_[1:]))\n",
    "    model.add(Deconvolution2D(nb_filters, nb_conv, nb_conv, output_shape_, **cp1))\n",
    "    model.add(Deconvolution2D(nb_filters, nb_conv, nb_conv, output_shape_, **cp2))\n",
    "    output_shape_ = (minibatch_size, nb_filters, 29, 29)\n",
    "    model.add(Deconvolution2D(nb_filters, 2, 2, output_shape_, **cp3))\n",
    "    model.add(Convolution2D(1, 2, 2, **cp4))\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class Decoder:\n",
    "    \"\"\"Decode hidden variables to images.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    zs : Theano tensor\n",
    "        Hidden variables.\n",
    "    \"\"\"\n",
    "    def __init__(self, zs, net):\n",
    "        model = net(zs, dim_hidden)\n",
    "        self.model = model\n",
    "        self.zs = zs\n",
    "        self.out = model.get_output_at(-1)\n",
    "        self.params, self.updates = get_params(model)\n",
    "        self.dec_func = None\n",
    "        \n",
    "    def _get_dec_func(self):\n",
    "        if self.dec_func is None:\n",
    "            zs = tt.matrix()\n",
    "            xs = clone(self.out, {self.zs: zs})\n",
    "            self.dec_func = function([zs], xs)\n",
    "            \n",
    "        return self.dec_func\n",
    "        \n",
    "    def decode(self, zs):\n",
    "        \"\"\"Decode hidden variables to images. \n",
    "        \n",
    "        An image consists of the mean parameters of the observation noise.\n",
    "        \n",
    "        Parameters\n",
    "        ----------\n",
    "        zs : numpy.ndarray, shape=(n_samples, dim_hidden)\n",
    "            Hidden variables. \n",
    "        \"\"\"    \n",
    "        # Used in test phase\n",
    "        keras.backend.theano_backend._LEARNING_PHASE.set_value(np.uint8(0))\n",
    "\n",
    "        return self._get_dec_func()(zs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generative model\n",
    "We can construct the generative model with PyMC3 API and the functions and classes defined above. We set the size of mini-batches to 100 and the dimension of the latent space to 2 for visualization. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Constants\n",
    "minibatch_size = 100\n",
    "dim_hidden = 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A placeholder of images is required to which mini-batches of images will be placed in the ADVI inference. It is also the input to the encoder. In the below, `enc.model` is a Keras model of the encoder network, thus we can check the model architecture using the method `summary()`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "____________________________________________________________________________________________________\n",
      "Layer (type)                     Output Shape          Param #     Connected to                     \n",
      "====================================================================================================\n",
      "input_1 (InputLayer)             (100, 1, 28, 28)      0                                            \n",
      "____________________________________________________________________________________________________\n",
      "convolution2d_1 (Convolution2D)  (100, 1, 28, 28)      5           input_1[0][0]                    \n",
      "____________________________________________________________________________________________________\n",
      "convolution2d_2 (Convolution2D)  (100, 64, 14, 14)     320         convolution2d_1[0][0]            \n",
      "____________________________________________________________________________________________________\n",
      "convolution2d_3 (Convolution2D)  (100, 64, 14, 14)     36928       convolution2d_2[0][0]            \n",
      "____________________________________________________________________________________________________\n",
      "convolution2d_4 (Convolution2D)  (100, 64, 14, 14)     36928       convolution2d_3[0][0]            \n",
      "____________________________________________________________________________________________________\n",
      "flatten_1 (Flatten)              (100, 12544)          0           convolution2d_4[0][0]            \n",
      "____________________________________________________________________________________________________\n",
      "dense_1 (Dense)                  (100, 128)            1605760     flatten_1[0][0]                  \n",
      "____________________________________________________________________________________________________\n",
      "dense_2 (Dense)                  (100, 4)              516         dense_1[0][0]                    \n",
      "====================================================================================================\n",
      "Total params: 1680457\n",
      "____________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Placeholder of images\n",
    "xs_t = shared(np.zeros((minibatch_size, 1, 28, 28)).astype('float32'), name='xs_t')\n",
    "\n",
    "# Encoder\n",
    "enc = Encoder(xs_t, dim_hidden, net=cnn_enc)\n",
    "enc.model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The probabilistic model involves only two random variables; latent variable $\\mathbf{z}$ and observation $\\mathbf{x}$. We put a Normal prior on $\\mathbf{z}$, decode the variational parameters of $q(\\mathbf{z}|\\mathbf{x})$ and define the likelihood of the observation $\\mathbf{x}$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with pm.Model() as model:\n",
    "    # Hidden variables\n",
    "    zs = pm.Normal('zs', mu=0, sd=1, shape=(minibatch_size, dim_hidden), dtype='float32')\n",
    "\n",
    "    # Decoder and its parameters\n",
    "    dec = Decoder(zs, net=cnn_dec)\n",
    "    \n",
    "    # Observation model\n",
    "    xs_ = pm.Normal('xs_', mu=dec.out.ravel(), sd=1, observed=xs_t.ravel(), dtype='float32')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the above definition of the generative model, we do not know how the decoded variational parameters are passed to $q(\\mathbf{z}|\\mathbf{x})$. To do this, we will set the argument `local_RVs` in the ADVI function of PyMC3. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "local_RVs = OrderedDict({zs: ((enc.means, enc.lstds), len(data) / float(minibatch_size))})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This argument is a `OrderedDict` whose keys are random variables to which the decoded variational parameters are set, `zs` in this model. Each value of the dictionary contains two theano expressions representing variational mean (`enc.means`) and log of standard deviations (`enc.lstds`). In addition, a scaling constant (`len(data) / float(minibatch_size)`) is required to compensate for the size of mini-batches of the corresponding log probability terms in the evidence lower bound (ELBO), the objective of the variational inference. \n",
    "\n",
    "The scaling constant for the observed random variables is set in the same way. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "observed_RVs = OrderedDict({xs_: len(data) / float(minibatch_size)})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also check the architecture of the decoding network as for the encoding network. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "____________________________________________________________________________________________________\n",
      "Layer (type)                     Output Shape          Param #     Connected to                     \n",
      "====================================================================================================\n",
      "input_2 (InputLayer)             (100, 2)              0                                            \n",
      "____________________________________________________________________________________________________\n",
      "dense_3 (Dense)                  (100, 100)            300         input_2[0][0]                    \n",
      "____________________________________________________________________________________________________\n",
      "dense_4 (Dense)                  (100, 12544)          1266944     dense_3[0][0]                    \n",
      "____________________________________________________________________________________________________\n",
      "reshape_1 (Reshape)              (100, 64, 14, 14)     0           dense_4[0][0]                    \n",
      "____________________________________________________________________________________________________\n",
      "deconvolution2d_1 (Deconvolution2(100, 64, 14, 14)     36928       reshape_1[0][0]                  \n",
      "____________________________________________________________________________________________________\n",
      "deconvolution2d_2 (Deconvolution2(100, 64, 14, 14)     36928       deconvolution2d_1[0][0]          \n",
      "____________________________________________________________________________________________________\n",
      "deconvolution2d_3 (Deconvolution2(100, 64, 28, 28)     16448       deconvolution2d_2[0][0]          \n",
      "____________________________________________________________________________________________________\n",
      "convolution2d_5 (Convolution2D)  (100, 1, 27, 27)      257         deconvolution2d_3[0][0]          \n",
      "====================================================================================================\n",
      "Total params: 1357805\n",
      "____________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "dec.model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inference"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To perform inference, we need to create generators of mini-batches and define the optimizer used for ADVI. The optimizer is a function that returns Theano parameter update object (dictionary). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Mini-batches\n",
    "def create_minibatch(data, minibatch_size):\n",
    "    rng = np.random.RandomState(0)\n",
    "    start_idx = 0\n",
    "    while True:\n",
    "        # Return random data samples of set size batchsize each iteration\n",
    "        ixs = rng.randint(data.shape[0], size=minibatch_size)\n",
    "        yield data[ixs]\n",
    "\n",
    "minibatches = zip(create_minibatch(data, minibatch_size))\n",
    "\n",
    "def adam(loss, param):\n",
    "    adam_ = keras.optimizers.Adam()\n",
    "    return adam_.get_updates(param, [], loss)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us execute ADVI function of PyMC3. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 0 [0%]: ELBO = -56970296.0\n",
      "Iteration 50 [10%]: Average ELBO = -53106500.16\n",
      "Iteration 100 [20%]: Average ELBO = -52194973.92\n",
      "Iteration 150 [30%]: Average ELBO = -52064982.24\n",
      "Iteration 200 [40%]: Average ELBO = -51975449.2\n",
      "Iteration 250 [50%]: Average ELBO = -51931158.48\n",
      "Iteration 300 [60%]: Average ELBO = -51887135.28\n",
      "Iteration 350 [70%]: Average ELBO = -51885579.92\n",
      "Iteration 400 [80%]: Average ELBO = -51846011.28\n",
      "Iteration 450 [90%]: Average ELBO = -51832335.44\n",
      "Finished [100%]: ELBO = -51903096.0\n"
     ]
    }
   ],
   "source": [
    "with model:\n",
    "    v_params = pm.variational.advi_minibatch(\n",
    "        n=500, minibatch_tensors=[xs_t], minibatches=minibatches,\n",
    "        local_RVs=local_RVs, observed_RVs=observed_RVs, \n",
    "        encoder_params=(enc.params + dec.params), \n",
    "        optimizer=adam\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`v_params`, the returned value of the ADVI function, has the trace of ELBO during inference (optimization). We can see the convergence of the inference. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7faa20a4b748>]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfAAAAFdCAYAAAD8Lj/WAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3XlAlHXiP/D3HDDc93AIAuIBiiieeBVqZSXZbiVluWVu\nqavl7rYpa3v2/fbLTtt1uzZXt822b266UdFlp+WNFx6IoijKIfdwDMecz++PmXmYYYZDBHlG369/\nhDk/fIR5P59bJgiCACIiInIr8oEuABEREV0+BjgREZEbYoATERG5IQY4ERGRG2KAExERuSEGOBER\nkRuSXIAXFhbilltuwXvvvdfpY/Lz8/Hggw/ioYcewoMPPohp06YhLy/vKpaSiIhoYMmktA68tbUV\ny5YtQ3x8PBITE7Fw4cJun9PU1IQVK1bg3XffvQolJCIikgZJtcBVKhU2btyI8PBw8baioiIsWrQI\nixcvxuOPPw6tVuvwnE2bNmHRokVXu6hEREQDSlIBLpfL4enp6XDbM888g2eeeQZvv/02pk2bhn//\n+9/ifTqdDrt378bNN998tYtKREQ0oJQDXYDuHDt2DH/4wx8gCAIMBgNSUlLE+7755hukp6cPYOmI\niIgGhuQD3MfHB5s3b3Z53/fff48HHnjgKpeIiIho4PWqCz07OxszZ87EQw89hIceeghvvfWW02Ma\nGxvx6KOP4le/+tUVFTAxMRE//vgjAODzzz/Hvn37xPuOHz+OpKSkK3p9IiIid9TrFvjcuXORlZXV\n6f1//vOfMXHiRBQUFPT4NfPz8/H888+jvLwcSqUS27dvxxNPPIGXX34Z//jHP+Dl5YV169aJj9dq\ntfDx8entj0BEROS2erWMLDs7G2fOnOkywFtaWnDixAm89957WL9+/RUVkoiIiBz1ehZ6bm4ulixZ\ngsWLF7tsZbNlTERE1H+67ULfunUrtm3bBplMBkEQIJPJkJGRgZUrVyI9PR15eXnIyspCTk7O1Sgv\nERERoQcBnpmZiczMzE7vT01NhUajEcO9t670+URERNeTXk1i27hxI6KiopCRkYHCwkKEhIS4DF9B\nENDTIXaZTIbq6qbeFId6SK32Zx1fBazn/sc67n+s4/6nVvtf0fN7FeDz5s3D6tWrsWXLFphMJqxd\nuxYAsGHDBqSlpSElJQWLFi2CVqtFZWUlHnroITz22GNIS0u7osISERGRhaQOM+HVXv/iFfXVwXru\nf6zj/sc67n9X2gKX1F7oRERE1DMMcCIiIjfEACciInJDDHAiIiI3xAAnIiJyQwxwIiIiN8QAJyIi\nckMMcCIiIjfEACciInJDDHAiIiI3xAAnIiJyQwxwIiIiN8QAJyIickMMcCIiIjfEACciInJDDHAi\nIiI3xAAnIiJyQwxwIiIiN8QAJyIickMMcCIiIjfEACciInJDDHAiIiI3xAAnIiJyQwxwIiIiN8QA\nJyIickMMcCIiIjfEACciInJDDHAiIiI3xAAnIiJyQwxwIiIiN8QAJyIickMMcCIiog4Ona7Ck6/v\nRlm1ttPHtOqMKCpvuIqlcsQAJyIisjp0uhqNzXpsP1ACTZMOr314vNPH5uwuxtrNh1CpabmKJWzH\nACeiAWMWBNTUtw50MVwymc344LuzuFDRNNBFGXBGkxnfHCxBYUk9/vXFKTS3Ga7o9c6VN+K9rwph\nNJk7fYy21YCLlX1T94Ig4NtDpTh+rtbh9h/yyvD8e4dhMJoAACfO1+L17OP4y9aj8FUpAQCVmlZc\nqm12+bplNc0QAJTXuL6/vymefvrppwfknV1oadEPdBGuab6+KtbxVXCl9VxV34q/f3QCiYOD4eOl\n7MOSSc+ne4rx6ofHMSTKHxEhPj1+3tX4XS68WI93tp+GTm/ChMRwh/teev8I8s7UYPLICKfnteqM\naNMbofJQdPseZrOA7J3n4e/jgQBfzz4re1+wr+OcPcXYtqMIu45fwoXKJijkcoyMC+71a696YzfO\nXWqEOsgbYYFe8FA619Vz7x3Gx7vOY9roSPh6eTjcd/5SI9758hTUQd7w8VJCZzBB22KATAYoFc7t\n0uyd5/DfH85h/8lKDInyh0wGvPvVaXy+7yJqG9uQODgY4cHeOFRYjZPFGjRo9VB5KNDQbPn595+s\nhFIhx9DoQACW/2MPpRyf7imGttWAggsaXKppwbgR6k5/ZrMg4G/bjqGsphmj4kMAWOr4Slzbnw5E\nbmjjpydxtrQB//n+LFb8dPRAF6fH1v0nDwaDCWt+NqHHz/nuSBkA4EBBFcYMDeuvonVJEARoWw3w\n93EM0BLr2GdphzFQs1lAwQWN5WtBgFwmc7j/mXcOQqPV4bVf3wCFvOtOzsOF1fh0TzG+PlCCN59M\nt7xflRaVmlZMSLSEgc5gwrYdRZg9PhpBfiqoPBWQy2QwCwIgAHK5rKu36BFBEFBW0wx/bw/kFlTh\nxtRB4n0tbUZ8uf+iw+OrO+k1aWrR48iZGqSNioBcJoOH0vXPLwiWf//5eQH+/bUcr/7qBhwurMGQ\nQQEID/IGALHno7iiCWrrbTbbcy/iWFEtjhXVIsjPEwajGc1tRkweGY5f/MTxb0ZvMOHL/SUI9PVE\nQ7Me3x4qg95gwumSevEx6/6Th5mpgxwuJOqadAj2V0HTpENzmxFbvj2DsUNDYTQL+NOm/ZiZGo2a\nhjbrz23AruOXcKiwGtNGR2LhLSPE1zEYzdC2GlBR24yjRbU4WlSLu29MgEx25f9vDHCiAWAym9HY\nbECwv/MVeH2TDgBwuX/etQ1tUHkq4Oft0f2De+nzfRcQEewttkgbmvUI9PWEIAjIP18HoD0Q3//m\nDDKmxiEq1Bc6gwneKuePG1srVWcwdfqeRpMZBqMZeqMZLW0GRIX6unxcS5sRzW0Gpw/77vx4tBzv\nfHkaT96XiuQhIeLtpVWW4L5U2wKjySy27LSt7d3HtQ1tDu93sbIJFXUt1q+1GBIVgHPljRgc7ucy\nzOq1lv9r+5//T//MBQC89usb4eOlxDcHS/DtoVJ8e6gUABDg44GV88fgg+/OQm80Y8VPR+PvH5/A\nvOlDkDqs/SLo+8Ol+PDHcxg3XI2fZ4xEYUk9/vPdWaQOD8OpCxrcO2sYqutb4ekhx7eHyhy6l8+U\n1uP2GQm4WFaPQD+V0//PORcTtyrrWvDUhn0ALGPDtY1tWPfYdPF33PY7MmJwkMPz9AYzXvi/IzhX\n3ohR8cFYtWAczGZBvP+jnedQVq3F+BFqxEb4AwDOllneXyGXoV7b3hOTW1CFB27W46Od53Dr5Fi0\n6o1obTPCaDIjbVQEDpyqQmm11uXf3Y68cgT5tV/EaVsNGBkXjCnJEfhin+UC5vsjZRgU5gtBsHzd\nUavOiG8PlUImA2akRCE2wh9///gE8s/XIT4qQHxclab1snqcOsMAJxoAH/5wDl/sv4g/LpqIIXZ/\n2ADQprd8WHp5dt8Fa2M2C1j95h74einx6q9vvKKyteqM+HjXeaQMDcWJc7X46YwEqDwVqNfqsG1H\nEQBg029n4eNd5/HJ7mL89oFxiAprD9XmNiPe/aoQB09VobnNiLhIf3x9oAQvLJ+KgA6tXFuAn7pY\nj68PluCWiYMd7j99UYNXPjgKs1mAyfqhvmH1TJfl3pCTj2NFtXhx+VSEBXYf4ocLqxEb7oePdp0H\nAOw8Vu4Y4NWWcU2TWUBFbQtCA71QXd/q0HIqrdI6BPiu45fEr09d0EAuk+H/bT6IkXHBWH3/OKcy\nNHYYBrCFPwDUNLQi1ssfJVXaDs8x4NnNh8Tv1/x9LwQAPxwpQ+qwMOw8Vo5jZ2txqLBaLFN1favY\n4jx/qREA8Px7hzu9cDp4uhoHT1uef/PEGADAyntSUFbdjCNnanD+UiNezz4Oo9EMk1nA8p+Oxl+3\nHhWfX9toaZkeLarBzNRoAMCJ83X4ywdHnX7fAcuYuKXOLGWsbmhv4V+qbcEnu4ux/2Ql1i6dgtrG\nNtQ16jB+hBqzx0ejtLoZgb6eeOuTfADAe18X4sCpKuzIKwcADLN2e4+MC8al2hYcP1frENT27C8G\nACDEX4XMmcNw1w0JeOLVXThcWO3U4+LKNwdL8c3BUqxakIojZ2oAAIV2Lf6i8oY+CXBOYiOyEgQB\nx4pqYDB2PrGmr3xh7ZLMs/5x22vTGwEA+ssoR12T5QOzuc3YZWu2Jz7fdwFfHSjBui152J5bgo93\nWwKuqKy91XW4sBqf7C4GABw7V4tqTfsHbl1jG45YwwMA9p6ogM5gQnm180QfT2V7q/b9b86gzvrB\nb3PqYj0M1pCwqdI4d99a/u8sLUhb3dpacUVlDXj23YNosLZ2AUtr8bUPj+Nv/z0Gg8G5ns1mAWU1\n7cFZUq3F258X4Om3DyDvTLXD7eJzBAEHT1WJ3xdc1IivUXBBg1adEYLQ/nPknanB3hOVDu97oKD9\n+9rGNgiC4PDB7+ftgTumxTn+7NZ/C0vrsSOvDG9/fkoMbxv77mKbjr8nvp3Mt9h/shJymQwj44Jx\nx7R4zLR2rx86XY2jRbU4cb4Or314HJWaViQMcgznsupm5BfX4WJlEwqKLcMOtgsIm2B/FUbFByM0\nQAWzIKChWY9LNc6zuis1rXjqrX34eKfl93FETCBGxYdgzqTBSBsVgZsmWC40Dtj9HwCW1rpcJsOI\nwUEYHO5nLYPj5Lhota/LQA0O8AJgGVePi/RHTUMbznUof1de3pLn8P2NYy11d+RMjcPvQm+xBU5k\ntSOvHO9uP42bxsdg4ZwR3T+hhxqb9YAMDq1PhVwGk1lAS5vR4bEmsxlGk+UPW9uDSVr7Tlbg2Nla\nzBgTJd5WVNYgTpIBLF2p58obsThjZLeth3qtDl8fKHG4zTYWWVTW/sH1evYJ8euy6mYMVvuJ32/P\nLREDt6isAS06y89oC6RtO4oQGeqDmvo2sZVrsze/AsNjgsRuVk2TY6ADwD8+PYm7tHo0a3VIiguG\n3mjCJ9ZWNADsPnYJ86bF40+bcpE2KkLsev5i/0UkDArA0EGBYqDZv7/9hUGlpgV6gxkRwd6o1LTi\n9MV6sUX60c7297J//vnyRtRr9ZiREoWzZQ04W9qAYYMCxfsf+8uPCPTzxAM3j0BtQxs++P6sw89l\nNJmx50SF+H3O7mLsPHrJoVXoo1IibVQkPt1zAQCQHB+MfGswtupM2PzlaYfXnDU+Gt8ftnT1/vaB\ncdh/shI78iw9DbYhDwDw9JDjf34+GZ/uvYARgwOx4ZOT4n1NLQYMiQqAl6clLm4YOwhjhoXhiVd3\niY+xzQmYNS5abE0DwI4jZfj2UCl8VEqnoZ2wQC8E+amw+v5x8FDK8fGu8/h413nk7D6PID9LF/fM\n1EGIDPWFOtALr354HFX1raiyjr+PHe44ZyI6zPXQikIuw4KbhsNbpRQD3N7P5ozA7PExaNUZsS+/\nAifO14mt5hC7rvbB4X44WaxBYUk9/Lw9MDjcT/y5AeCRjJE4WazB3nzL/+GQKH+cv9SEe9ITUFbd\njHPljbhv9jCcK2/EodPV+OpACX6WkeyyzD3FACe3oDeYkLOnGDdPHIzALmbrCoKAplaDU1etjdks\n4GJVE+IjnbvxbH+MeWerex3gmiYd3so5ibtuGCJOxvn1q7sgkwGbfjtbfJyXpwLNbUZU1DkGWG1j\neysxv1iD3/9jH5bOS0ZcpGXsr6lFj7c+yce8afFIjA0WP2iD7D5oTl2sh5enEv/6ogDLfzoa735V\nCABIGxWB0QmhuFTbjJqGNiTFBjlM2hEEAR/tPO/U8q9rbMP3R8rwZa7jRCbbOGLxpUaHltfe/Ap4\nKOWQAWJ4A5bx4vOXmsQWsiv//eEcAOCPiyYiItgHdXb1YXOhogl/3XIEABAR4gOVhxwXK9tbwnqj\nGV8fKIG21SCGNwB81eHCBED7ZDBYumrzi+vwzYESceLarHHRyNlTjB+PlrfXk93z7Sdz2Vp+4xPV\nECBg9/EKHLOOK3t6yKE3mNGg1ePNj07AlYOnq1CpaRUvGoormgBYLp5uGh+Dbw+XIn3cIIegunf2\ncPzZOmZuM2GEGgtuGg5tqwE1DW1igCcMCsCgMF/ERvpjSGSAQ4CnDgtDSIAXHro10WGM32bE4ECH\n7wN9PfHnhydBo9XhQEEl9uZbeg5ShoY6PM5kFhAa4IXaxja06IzWCwEFCi5osGTeKAyPaR8Pj7f+\njn93uH1see6UOIQFecNgNGNkXLD4N+qhlCMi2LHFPMiuXp5ckAo5gGExQWjTG8UJirERzgE+1jp5\n0lulxKzxMTCaBTHAk+xm2seG+4tfR4X6YOU9Kcg7U4PE2GDUa3UYEhWAyBAfMcB/9+AEVGlaERXq\nC0EQIFgnHK5akIrfvrUX3xxkgNN1ImdPMT7bewHnLzVi1QLnsUSbT3YX4+Nd5/G/P5+MGBdX21u+\nO4NvDpbiV/PHYOwwxyt4ozW4rmRW74FTVdifX4GoYG/cOWMINNYJaYIAGIwmeCgVMJnNaNVZui9L\na5rxf18XwmAy48axg5zWm16qbcGz7x7C60/cCA+lHDuPXcLJYg0KijXYkDVTfNzpi+1dpOfKG1Bw\noQ6l1c3YkNPekvrmUCkiQ3zw+3/sBwDck56AjKnxAID883X44PuzKKnSIiLYG0qFHGXWta2Vmla8\nu93SspuUFI4JiWq8/+0Z3H1jAvLO1OBQYbVDNy8ATE+JgqaxDUeL2idG1TS2YV9+BXrimXcOwtdL\nieY2I3xUSocLAXuVdY5drbenxeKL/Rfx9UHnsLaxzSwGgJ/MiEe2tUWtM5jw+ofHxTkIADA0OhDJ\nQ0KQW2AJ52i1L8rsWt0aa5e/yWzGvpOV8PVSIjk+BPVNOuw+XiG2Rl9eMR1nSuvxxb6L4gSssEAv\ncRYzAOywBte86fHY+GmBePvSO0chbWQEpqVEiiH34vKpaNOZEBPuh/99ZDKC/FT44Luz2HOiArPH\nRyM00AuhgV7wUrVfoHkoFfBQKjAzNdph/fUzj6YhLNBL/N7VJMgRMUFOt8VF+iMO/tDpTWKA2184\nD4sJxNy0OIxOCME7X5zC8XOWnqL0sYNQXtuMGLXj32fykBDMTB0kjl1Hh/kizHoR7KGUY/X941BU\n1oDn3zuMh29PcipPwqAApI2KwIQRaiTb9UB5KNvLZN9NnjosDL+cP8bpdWwXAslDQhBp93j71vvg\ncD94eSoxJTkSQPvFbHyUP24cG4Vxw9VQyOXihEuZTAZb51eAryemjIrAD3ntF4W91asAz87Oxvr1\n6xEbGwsAmD59OpYtW+bwmM8//xxvv/02FAoF0tLS8MQTT1xxYen6ZfugO1mswZsfncCi25Kc1kgL\ngoCPrV2px8/XYpDaFzJAnHTUqjPim4OWFlluQSUEWFqXs8dbxs5suynpXIyJApYAVirkkMlkEATB\n5TIQ28zlj3adx/6CSvG1AaCyrhUx4X6ob9KLrb4GrR7fWFuJnf1BG01mVNa1ICbcTxyHFgC89/UZ\n8TG2cUWZzDL72fYhbL8JybGiWuxQt7/H8aJaZEyNh7bVgDc+sgTXxKRw3H1jArbtKBID3Ob2KbHI\nnDkMAMT1z3VNOnHtrL2RccE4U2oJ9bhIf1yoaEJZdTOq61vhoZRj9JAQsZXTmWbr8EJwgAqLZ4zE\n/pMVYjd2R0F+nhAA3JoWix+PlovPXTB7GL4+WCpOqgr2V+HPiyfh9xv2YVR8CDKmxiNa7YeSKi0+\n3nXeIbwBywf1jJQoHDpdjVsmDsbwmEC8at2ZKyLEB5V1LdAZTDh1QYPGZj1mj4+Gh7J9vbDtPf28\nPTBuuBoj44JRWdcq9qiUVGmRW1CJz/ZeQGGp5f923HA1AEuAr16QipHWMLKf/GU/Sc8WhD/PGIn7\nbx7uMNs/ItgH99803GlsWqmQY+igAGi0uk67nu0NH+wc4DYpCSHwVikwI2WQw+0jYoKQau3mfuSO\nUQ73dQxvW5keui0JB09XQ9tqcNlaHhodiDd+k+5yRr9SIceyO7tu0cplMvECTqlwfaE+yjrhcHiM\nY69DZKgPhscEwtfLA3fOGOLyuQq5HA/fPrLLMgDALRMHO/SA9FavW+Bz585FVlaWy/va2tqwbt06\nfPrpp/D29sa9996LO++8E0OHDu11Qen6Zr+s5MCpKoQHe+OedMffJ/uJKXUNOrz8/hG06Iz408OT\nIJfJsPOY3Qzhi/Viq2HyyAioPBSorLN0hzY269HSZhQvEMxmARs/O4n9JytxW1osTCYBe/Mr8Jt7\nU8UP4ipNC/y8PRwmNV2qbcF7Xxe2f19nmcn89heWD2dbC9MVb5VCbKUDQHltM0IDvXDqYntQ7uiw\njEUuk2HssFAcOVPj1A1604QYfHuoFJ/vuyDeVlTeiH35FeJmJffNHoZbJ1suym0tsumjI7HbOi6b\n5mLTkhh1+4e/v48Hmlos7zticJBl7B/AxEQ1NI1t4kXGT28YgjunD8HKv/6I5jYjJiaF446pcXj6\n7QMAgLtuTMBN42PwxGu7YDCaEeyvwoRENSYkqvHz579zWV8v/GKqeHE1NDpQnNA2ITEcE5PCseqN\nPQAsLcQAH0+8tGIalAo55HIZxo9QY1CYr3jxd9vkWHyZexFengp4eigwOiEUbz6ZDqVC7lCvQyL9\nUVnXguXrfoCnhyVQbBc20WG+8PP2gLbV4DAp0stTKf7OAJYLBPtel4hgb4cAtr8Q6AlXS/VumTTY\nxSOBNT8bj87mUa1dOgXNBjPe334KHgp5l0sTfbw8sP6XNzj1XCl62ZO1/CfJ2PR5AeZOiXN5f2dr\ny3sqJMAS4LZemI5k1gl7HSkVcjx1GXscdGVQmC9eXD7til+nX7rQvby8kJOTA29vy1ViUFAQ6uud\nZ0ESdaa8phnaVoM4mcl5HarjTNDSKi02fdbeXfzt4faxz8KL9UiMDcKOI2VQKmRIjA12uPo9W9YA\nH5VSbBUDluU8tlbLhcom7LOGvW09KGDZhCLAxwOVmlbUNLRhwgh1l1sqFpU14EJFk9hanTd9CLZ8\ne8blY31USrTqTFB5KqDTm1BSpcVney+gVWfCTRNiEODjIXb92oQFeSE+KkBs2c4eH43DhdVoajEg\nY2ocTl/UiJOupoyKwL6TlWIXe8KgAMwaFy2+lm1p1KAwX/zvI5NRUqUV1+Das5+8Nio+BPtPWuop\n0NcTU5Mj0dxmwOzxMeLEuNAAlXiR4GO9gJHLHLsnR8VZdqALCfBy6iJf99h0tOmNeGlLHpLjgmEw\nmXF7WpzDWL59gAf7qxy6i227ndkmZNnYd5WOHRaKqaMj4W23jM+2Btw+yMKD21vBeoNlnbitlSyX\ny7DsJ8lYtyUPU0Y5X/jYs29Z2+r4dz+bgDaDEZ492M2tt7raZCYyxAdqtT9iQ33gOOrvmv3uZ7Yh\nD9VlLIO0NzI+BC+vmN6r5/bEndOH4C8fHMUc6++hO+t1gOfm5mLJkiUwGo3IysrCyJGO3QY+PpY/\niNOnT6O8vBypqalXVlKSNLMgoLKuBZEhPpe9w1BNfSuOn6vFhKRwcQztDxst47SvP3EjvFVKp+VF\nZ8sa0NxmwHtfFaKhWY/CknqYzAKmj47EkTM1DmOmu09csqzlrWvBlOQIJHUI8L9tOyZ+PXlkOHIL\nqpD9YxGUCjlGDQkRZzjb7kuOD4bJLOCUddzZtvym49IdwLLUZfjgIHy294LDJCoflRKj4oLx9OJJ\n2Hey0mmnK1vLPGlwEI4W1eLbQ6Vo05swIVGN+2YPg1IhR3pqNApL6vGGdVJU6rAwxNoF4bzpQ5A5\naxg0TToE+akwOiFUDPA7ZwzBPmvY3jEtHnffmODw/hMS1ThZXIdJSeEIC/J22eUJAKF2Y6dxEf6Y\nmTpI3PbSx0uJO6dbuhpvmTQYh05X4xc/HS2u/fZReQBoQ0ub0eF3JirU8tkREeyNyroWh25ty1ij\nCu8+fRuqqhpd/q4Ns+sulstl8JS3B0mAb+ctyV/eMwZHzlRjaHSgy+04bf66cgaMJjNOdOgCHRTm\n49A6TI4PwV8enw7fbjbWUQd5i6112+zrYTGX1/LuL71p7a6+fxw+21vscEEoJSkJoXjzN+lir4k7\n6zbAt27dim3btjmM+2VkZGDlypVIT09HXl4esrKykJOT4/Tc4uJirFq1CuvWrYNC0X9XktS/BEFA\nUZllpnFnE7xyra25UfHBeOLesQ5X97UNbQj084RMBtTUtzlMJGls0WPNW/tgFizbU664K8VhfeS3\nh0pxw9hBDrOzAcv2hK9uOyaOGwJAxtQ4/GTGEOw+sQOAZQnNsbO1OHi6GuXWdaVzJg2Gt6frX/vU\nYWG4PS0OuQVV4tIc+0lYC28ZgcyZwxDsr0JzmwGFJfUYFhOEQF9PrNtyRHzOhKRwFF7UIOuB8YgO\n84VZEJBbUInmVssa7XvSh+K2tPar/9BAL6cAfyRjFP6Rk4/7bhqOwtJ6sTt9zqTBYrgE+HpiYlL7\nHt2TR0ZgcLgvbhw7CDPGRImz9W2ty+T4EPF9IkN88Mwjk3G4sBpzJjm3RIL8VFh5j/MEn47sA3RQ\nmC8SY13vj50xNV6cMGcTrfbFhcom+PlYAm7+zKGoqG2Bj/UC4Ge3jMCbLSew8GbXKwI6u1C07XgV\n56LHoKv9xlOHh4ljtl2xvUZIh928XK18CPTr2V7XWQ+Mw/99XYibJsZ0/2CJi4v0x4q7Uga6GF3q\nbe+A1HQb4JmZmcjMzOz0/tTUVGg0GqdJPRUVFVi5ciVeeuklJCYm9qgwarXzHxxZ1gP7dbIs6nKp\n1f5oaTNAECC2DPQGE749WIKbJg522WX3yY9F+MfHJ7D4jlG4e9ZwCIKAFzYfhNFkxuJ5yfiff+yD\nyRq6J4s1eP2jfAT4euLJBybgox+K8Pan+bhn1jAE+auw6ZN8JMYGI8hfhaExQSi8qBG7rg+erobW\nYEao3QSdD388h0/3XoDergs9OSEUeoPJaYOLZfeMhUwmwy2TY/F17kXMu3EowkN98Z+vC3H+UiPG\njVBjUkq0wwVCeIgPhkYH4sHbRyI8xAfKTi5QRsaHICHOcYmM/fdDB7evx33g1iSM6BBkb665GUq5\nDAKcD1s5e2y2AAAgAElEQVRQA5g1IQaBfiqcLa3HvBkJmDZmEG6bYWkVjxmmxv78CkSE+GDK2Bin\ni6iFtyWhuLwRk8cMgkwmw+qHJrn8GaYH++DLAyWYMjoKarU/1Gp/pI6KcvnYy7H4jmR8ua8YU1Oj\nxfDtiV/dPx6RXxdi/k3D4e/jiUXzHPewVqv98bdVszt5dtefF//8wxz4eCmdWr+DwgP67HNmmN1c\nx5ShYVh+z5hev7Za7Y9xffB/0df4mSxtMqEX28Fs3LgRUVFRyMjIQGFhIVatWoVPPvnE4TGPPPII\nli9fjokTJ/b4daureWxfR4dOV+H17BP4xU+SXZ58dDnUan9UVzfhl+t3QttqwFurZiL7x3MouKDB\nhcomZEyNc5oYBgB/3LgfZTXN4naQh05X4/Xszs/ItbFfrhMW6AUvT6XTwRA2M1KixG0oA/080aDt\nfBOTlIRQ3Dh2kFiGn84Ygkkjw8UlGzqDCZomHSJDfFCpacFTb1n2Z35u6RSx9f/8e4dRWFKPv/3q\nBqcJOh0nSj29eBKC/VVOh13Y+yGvDO9YN9HIfnEeNHV9d7yg0WTGmdIGhASonNa+Xq9sv8s9Zfs/\nffj2JHE3rL5wrKgWcZH+Xe5N4K4ut47p8l3pBVKvxsDnzZuH1atXY8uWLTCZTFi7di0AYMOGDUhL\nS0NgYCAOHz6Mv/3tb2LLfPHixZg1a9YVFfZ6ZNsw/4v9F3sV4HqDCZ/uLcbNEwZDrW4/aAIAvtx/\nwWFzjjIXW10CEEPYtjf3p3uKIbNOPLLfQMPV8+Ij/aFtNaC2oc1h0k9Ht04eDIVChh/yysXwTk8d\nhFnjotHQrMfhwmqU1TRbdreKDkDq8PbW7x3T4x12GFN5KMRu44hgH/ziJ8lQB3k7dN0/kTkWLTqj\ny9m100ZHYs+JCvziJ8lIiAoQ16J2JdzuMV2Nn/aGUnFlRzdSuz44AMrBmA4blxBdTb0K8IiICGze\nvNnp9qVLl4pfHzlypPelIpFttmxrmxE6vQk/Hi1HvVaHsEAvRIT4OGyZCUDsHrYNZ3y5/yI+3XMB\nZ0oa8PKv09HY0r4MpuMs5oZmPYwmM/afrISHUo5z5Y2o1+rECWF1jTpcrGzChcompA4Lw+K5Sdjw\nSb7YdRzg4+Hw+mGBXvj1vWPx7cFS5OwpRqWmFd4qJWaOG+QwmxuwrKl9cE4ihscEiptY2J8+lGLt\nNj90utpyVKFchpdXTIPJ7HycY0euLnxUnopOx8EevDURs8ZFX9YSnmExgRidEIIZKdLrBiVg5rho\n7DhS5rDzF5G7405sEmQ0mfE/bx/A5JHh4mYDVfWtWP7KD06PfWtVOjyUChiMJlRpWpGzpxjnyhvF\nbQobrPtpn6+wLLuq6eQcX8CyGciyl3Z0umikpqEVu49b1gTfMCYK/j6eeHLBOLz0/hEUXNDA19sD\nD88diYOnqrDwlhGQy2VQeSiQFBuEHMsyXIyMC8ZdNyTg6wMl4p7fQHurddroKDHAOx4L6emhwNTR\nkeL3IQFe6A8qD8Vlr7/1UCrwm3u50kKqFt4yHHffmNCvR60SXW0McAkqq25GWU0zsnee77br9MX3\nj2DZvGTsyCt32KTj9ewTeHnFNHEDFL3BjNe25mG73WMAYNmdydAbTPjhaDnOlTc6hXfi4CDcMT0e\nXx8owbGiWhwurIKnUu6w57GPqn3Dk9RhYQ5nEgNAot3P4OftAaVCjuT4EFTVtyI8yNtp5vKvM8fg\nZLEGEV10uRNdDoVcDj9v9182RGSPAd7HKutaoFDIujyPWBAEfHWgBCMGB7k8G9d+Z6Z6revdgmyK\nyhrx1cESHD/XviZ1xOAgFJbU42SxRtxCEoBTeAPAyPhgBPh4wlulxDtfnsLKe8ZAJgOe+/dhAMDi\njJEID/JGXqFlc5DaRh1GxDiuk1VYewnsj3y0J5fJMHdKHD7fd0E8FOGxuy3Lxew34LAZMzQMY4Z2\nv5yHiOh6xgDvY09tsMx4/ueazpe/XKzU4j/fne30cfZ7UHe23R8ArLw7Ba9+eBxnShtQpWlBbLgf\nlt81GtpWA57dfAj78itQ2+B8HKM929rVidZDKmQymcPOVWrrRh1RYe0TwDp2L8dHBiC3oKrL8cV7\n0hOQOiwMCdGWC5a+nuhFRHS9YYD3Ifu1ytpWQ6fjbUXlDa5vL2tAeU2zw2zwNr0JQX6eSEkIddjL\nGwBGxAZBHeQlHlgxZlgoIoJ9EB4kIDzIG4fPVENvdzDHTZMG41vrbmDPPJoGvw6HgdgmvikVlrOB\nlQqZeNu00ZH4t/VYyoRBjgE+Z9JgBPh6YMKIcHRGJpNJZncpIqJrAQO8j+w6dklc8gUAxRWNGD3E\neYlJRV2LeD4v0B70jS16PPvuIZevnRQXjMVzR2LGmCgUX2rC1h1Flk0qvDwQo/ZDdb2llT0yzjIj\nXSaTYUpyBD7ZXWy9PRipw8Nwz82JuGVCDBp6cAJRx4PvvTyVeOLesfj+cBmShziOWcvlMkwbzdnX\nRERXEwO8j/zz8wKH78+XNyLY3ws5u8/jrhsTEBHsA6PJjBfeO4yG5vZNSsqqtZDJZHjz4xOdvrZt\nk4jhMUEYHhMkzu4GHLdqTIxt78KemhwpBnh8pD9umTgYKg8FwoO8HdYsX46UhFCkJHDdKxGRFFx3\nAW40mfFG9glMSY5wWh8sCAL+3+aDiAj2wdJuzpUFLOdLb/z0pHhMor0jZ2rEddbRaj/cnhaLAwVV\nYnhHhfrgUm0LSqubsfv4JTRo9bhpfAzmTB4MvcGESk0rXrOeO9zxIImbJrTvl5w6LBQ7jpTh7hsT\nHNZDR4T4YM3C8ahpaMXYYZwQRkR0rbnuAry8phl5Z2uQd7ZGDHC9wQRtqwGtehPOX2rC+UtNkMmA\n+daDKzrz49Fy8ejGjoor2rcgrNfq8M6Xp8Q11L9/aAI8lQr8+Z+5+PZQKSrqWjB+hBoL57Qf2mC/\nRnpKcuc7sKUkhOK5pVNc7nI2YnCQeBwnERFdW667AG9paz9mctOnJ3HPzKH4aOd57D5+CePsTiLa\nm18JhUKOn89tPyZVZzDBZBKw6bOTSIoNdtnyBiwzug+eqhK/LyjWiOcaT0oKR0JUAAQB8FYpUGG9\nfdZ4x6P3YiP8cPeNCUgdHtblub0ymcxhi1AiIro+XHcB3tTavtXn7hMVqK5vRVOrASazgIOnLec5\nP3bXaLyefQInztXiy/0Xsb+gEo/flYJXPzwm7v195EwNPJRy8Rxfe7dMjMHBU1WIVvuitqFNDGn7\nA0lkMmBYdBCOn7McV5nYoaUsk8lwx7T4fqkDIiJyf9fdYtymFsdTrgpLG3CptgUBPh5QyGUI8PXE\n+BFqTBkVgXqtHh98fxYXKprwygd5Tgd3GIxmxEX44ZGMkYiL8Bf31h4eE4TV94/D6gXjEGpdR62Q\ny5x2KAuz3mfbnYyIiKinrrsWuNZ62MaTC1Kh8lBgrXXp1thhYZgxJgpyuWXtc0pCKPadrERkiA/q\nGttwqbbF4XUiQnxQWdeCEbHBmJ4ShekpUWjTG2G2Lru2bYEa4OOJMjQjLMjb6aztW9NiUVhSjwdv\n7dl56URERDbXbIAXlTUgLtLfqWXbZA1wf28PRKvb10JHq/0cdhKbPCocRrMZ44ar8d3hUnyVW4L5\nM4di8/bT8PP2wLOPpiG/uA4j7J5jOznMnq17PdjP+bzg8CBvPPNo2pX9oEREdF26JgM872wN/rbt\nGGaMicLP546EIAj49lApDEYzmlotXej+Pp4Ok8NCAxxnmyvkctwwZhAAYN60eMybFg+ZTIbkISHw\nVMohl8t6tCZ6SJQ/Sqq0GM3100RE1IeuyQA/V26ZHb7r2CX8fO5IfLb3Aj788RyA9qD297Fsc/qn\nhydi17FLXa6Vltmtr+54xGV3Ftw0HImDg5HWxVIwIiKiy3XNBbimSSceoQkAmz47Ka6/BiynaXmr\nFGLXenxkAOIjnU8E6ytenkqHM6yJiIj6wjUV4DqDCU++vtvhNlt4zx4fjT0nKtCmN3W5rpqIiMgd\nXFNJ1tis7/S+mycOxu1T4gDAad02ERGRu7mmWuCugtlbpcDapVMR6OuJ2ybH4kJFE5Jiub0oERG5\nt2s+wP19PMXTvDyUcjx+d8rVLhYREVGfu6a60G2btNibNS7axSOJiIjc2zXVAm/q0AL/88OTEBvh\n18mjiYiI3Nc1EeDfHynDmZJ6hAR4OdweF+k/QCUiIiLqX9dEgL+7/TQAINQuwOdaZ5wTERFdi9w+\nwA1Gk/h1bWMbAOCVx6eLE9eIiIiuRW4/ia28psXpNn8fD4ftT4mIiK41bh/gpdWWM7qD/dsPI+FO\na0REdK1z+6QrqbIE+E9vGDLAJSEiIrp63H4MvKbBMu49dlgYbhofg9BAr26eQURE5P7cPsAbmnVQ\nyGXw8/bAwjkjBro4REREV4XbBrggCKjX6tGg1SPA1xNyTlojIqLriNsG+M5jl/CvL04BAOK5YQsR\nEV1n3HYS257jl8Svg/xUXTySiIjo2uO2AR5gF9oB3LSFiIiuM24b4F6eCvHrID8GOBERXV/cNsBb\ndUbxa7bAiYjoeuO2Ad7S1h7gJpMwgCUhIiK6+tw2wJvtzv4enRAygCUhIiK6+tx2GVlzmxEhASo8\nt3QKPJSK7p9ARER0DXHbFniLzgBfLw+GNxERXZfcMsBNZjNadSb4erltBwIREdEVccsAt01g8/Hy\nGOCSEBERDYxeNWGzs7Oxfv16xMbGAgCmT5+OZcuWOTzmtddew65duwAA6enpWL58+RUWtZ0twNkC\nJyKi61WvE3Du3LnIyspyeV9ZWRnOnj2LLVu2wGw24/bbb8f8+fOhVqt7XVB7zWKAswVORETXp37p\nQo+OjsZf//pXAEB9fT3kcjn8/Pz67PW11iVkPmyBExHRdarXAZ6bm4slS5Zg8eLFKCgocPmYZ599\nFnfeeSdWrFgBb2/vXheyo3PlDQCAqFDfPntNIiIidyITBKHLbcy2bt2Kbdu2QSaTQRAEyGQyZGRk\nIDY2Funp6cjLy8Mf//hH5OTkuHx+U1MTfvazn+GNN95AdHT0FRXWaDLjfzbuQ15hNeQy4L1n5sLP\nm93oRER0/em2DzozMxOZmZmd3p+amgqNRiOGOwBUVFSgpqYGo0ePhr+/P8aPH4/jx493G+DV1U1d\n3n+pthl5hdUAgEA/FVq1bWjVtnX3I5CVWu3fbR3TlWM99z/Wcf9jHfc/tdr/ip7fqy70jRs34rPP\nPgMAFBYWIiQkRAxvAKirq8PTTz8Ns9kMk8mE/Px8xMfHX1FBAaCuSSd+fXta7BW/HhERkbvq1Syw\nefPmYfXq1diyZQtMJhPWrl0LANiwYQPS0tIwduxYzJkzBwsWLAAAzJw5E0lJSVdcWE2jJcAfujUR\nM8ddWXc8ERGRO+t2DPxq6q67Jmf3eWTvPI/f3DsWoxNCr1Kprh3sErs6WM/9j3Xc/1jH/W9AutAH\niq0LPdhfNcAlISIiGlhuFeAaMcC9BrgkREREA8utAryusQ1engpu4EJERNc9twpwTZOO3edERERw\nowBvaTOguc2IsMC+29GNiIjIXblNgFdqWgEAEcEMcCIiIvcJ8LoWAEBEiM8Al4SIiGjguU+A21rg\nIWyBExERuU+A21rgwWyBExERuU+Aa1qgVMgQGsA14ERERG4T4HXWJWRyuaz7BxMREV3j3CbAW9qM\n8PXi2d9ERESAmwS4wWiCwWiGL3dgIyIiAuAmAd7SZgQAeLMFTkREBMBNArzZGuBsgRMREVm4RYDb\nWuA8xISIiMjCPQJcZwAATmIjIiKycosAt3Wh+6jYAiciIgLcJMDZhU5EROTITQKcXehERET23CLA\nm9kCJyIicuAWAc4udCIiIkduEeDN7EInIiJy4BYB3qqz7sSmUgxwSYiIiKTBLQJc22qAt0oJhdwt\niktERNTv3CIRm1oN8Pdm9zkREZGN5ANcEAQ0txrgywAnIiISST7A2/QmGE0C/H0Y4ERERDaSD/Dm\nVssMdD+2wImIiESSD/AmBjgREZETyQe4lgFORETkxH0CnGPgREREIukHeIslwLmMjIiIqJ3kA5xj\n4ERERM4kH+CchU5ERORM+gFuO8iEAU5ERCSSfIDrDWYAgKeSB5kQERHZSD7ADSZLgHsoJV9UIiKi\nq0byqWg0WgJcqZANcEmIiIikQ/IBbjCZoVTIIZMxwImIiGykH+BGM7vPiYiIOpB8MjLAiYiInCl7\n86Ts7GysX78esbGxAIDp06dj2bJlLh/7m9/8BiqVCs8991yvCmgwmuGhYIATERHZ61WAA8DcuXOR\nlZXV5WN2796N0tJSDB06tLdvA4PJDB9Vr4tJRER0Teq3pq1er8ff//53LF++/Ipex8gudCIiIie9\nTsbc3FwsWbIEixcvRkFBgdP9GzZswP333w9fX98rKqBtFjoRERG167ZveuvWrdi2bRtkMhkEQYBM\nJkNGRgZWrlyJ9PR05OXlISsrCzk5OeJzLly4gBMnTuDxxx/H/v37e1wYtdrf4XtBEGAwmuHj7eF0\nH/UO6/HqYD33P9Zx/2MdS1u3AZ6ZmYnMzMxO709NTYVGoxHDHQB27NiBS5cuYcGCBWhqaoJGo8Gm\nTZvwyCOPdPle1dVNDt8brJu4QBCc7qPLp1b7sx6vAtZz/2Md9z/Wcf+70gukXs0O27hxI6KiopCR\nkYHCwkKEhIQ4bLSyaNEiLFq0CIClqz07O7vb8HbFFuCchU5EROSoVwE+b948rF69Glu2bIHJZMLa\ntWsBWMa909LSMHbs2D4pnJH7oBMREbnUqwCPiIjA5s2bnW5funSp022TJ0/G5MmTe/M2Yguck9iI\niIgcSToZeRIZERGRa5JORnEMnAFORETkQNLJyAAnIiJyTdLJKE5i4xg4ERGRA0knI1vgRERErkk6\nGTkLnYiIyDVJJyNnoRMREbkm6WQ0GE0AGOBEREQdSToZOQZORETkmqST0WgSAHAWOhERUUeSTkZx\nEhtb4ERERA4knYwcAyciInJN0slo4EYuRERELkk6GTmJjYiIyDVJJ6PRaJ3ExgAnIiJyIOlkNJg4\nBk5EROSKpJNR7ELnGDgREZEDSScjl5ERERG5JulkZAuciIjINUkno5GHmRAREbkk6WQ0GM2QyQCF\nXDbQRSEiIpIUaQe4yQwPhRwyGQOciIjInrQD3Ghm9zkREZELkk5Hg9HMGehEREQuSDodbV3oRERE\n5EjS6WhkFzoREZFLkk5Hg4kBTkRE5Iqk09FgZBc6ERGRK5JNR7MgwGgS2AInIiJyQbLpaOQ+6ERE\nRJ2SbDqK26iyC52IiMiJZNNRPMiELXAiIiInkk1HnkRGRETUOcmmo4EnkREREXVKsulo4CQ2IiKi\nTkk2HdkCJyIi6pxk09HIMXAiIqJOSTYdOQudiIioc5JNR85CJyIi6pxk05Fj4ERERJ2TbDpyFjoR\nEVHnJJuObIETERF1TtmbJ2VnZ2P9+vWIjY0FAEyfPh3Lli1zeExycjImTJgAQRAgk8nwzjvvQCaT\n9fg9OAZORETUuV4FOADMnTsXWVlZnd4fEBCAzZs39/blxcNMlAxwIiIiJ/2WjoIgXNHzTSbL8xWK\nnrfaiYiIrhe9DvDc3FwsWbIEixcvRkFBgdP9Op0Oq1atwgMPPIB//etfl/36JrM1wC+j252IiOh6\n0W0X+tatW7Ft2zbIZDJxPDsjIwMrV65Eeno68vLykJWVhZycHIfnrVmzBnfeeScAYOHChZg0aRKS\nk5N7XDCT2dKFrmAXOhERkZNuAzwzMxOZmZmd3p+amgqNRiOGu819990nfj116lQUFhZ2G+Bqtb/4\ntUrlAQAIDfV1uJ2uDOvy6mA99z/Wcf9jHUtbryaxbdy4EVFRUcjIyEBhYSFCQkIcwvv8+fN47bXX\nsG7dOhiNRhw+fBi33XZbt69bXd0kft2k1Vn+bWx1uJ16T632Z11eBazn/sc67n+s4/53pRdIvQrw\nefPmYfXq1diyZQtMJhPWrl0LANiwYQPS0tIwduxYREVFYf78+VAoFLjpppuQkpJyWe8hTmKTswud\niIioo14FeEREhMslYkuXLhW/XrVqVe9LBbsxcDknsREREXUk2eat0cxlZERERJ2RbIC3d6EzwImI\niDqSboCLXeiSLSIREdGAkWw6mtiFTkRE1CnpBri1C13JLnQiIiIn0g1wM5eRERERdUay6di+lSpb\n4ERERB1JN8A5C52IiKhT0g1wswC5TOawRSsRERFZSDjAzew+JyIi6oSEA1xg9zkREVEnGOBERERu\nSLoBbhKgUEi2eERERANKsglpMpvZAiciIuqEhAOcXehERESdkW6AswudiIioU5JNSJNZ4D7oRERE\nnZBwgHMMnIiIqDPSDXCTwI1ciIiIOiHdADcLPImMiIioE5JMSEEQLHuhswudiIjIJUkGePtZ4Axw\nIiIiV6Qd4BwDJyIickmaAW49C1zJMXAiIiKXJJmQJrMZALvQiYiIOiPRAGcXOhERUVekGeAmTmIj\nIiLqijQDXOxCl2TxiIiIBpwkE5Jd6ERERF2TZoCzC52IiKhL0gxwcSMXSRaPiIhowEkyIY22MXB2\noRMREbkkyQBnFzoREVHXpBng3AudiIioSxINcFsXuiSLR0RENOAkmZDte6GzBU5EROSKNAOcXehE\nRERdknaAswudiIjIJUkmpN5gAgB4KCVZPCIiogEnyYS0BbinhySLR0RENOAkmZA6g2UWuspDMcAl\nISIikiaJBrilBc4AJyIick3ZmydlZ2dj/fr1iI2NBQBMnz4dy5Ytc3jMqVOn8Pvf/x4ymQyzZ8/G\nihUrevz6DHAiIqKu9SrAAWDu3LnIysrq9P4//elPePbZZ5GUlIQnn3wSOp0OKpWqR6/NACciIupa\nrwO8K7W1tWhtbUVSUhIAYN26dZf1fL3eOonNkwFORETkSq/HwHNzc7FkyRIsXrwYBQUFDveVlZUh\nICAATz31FB544AG88847l/XabIETERF1rdsW+NatW7Ft2zbIZDIIggCZTIaMjAysXLkS6enpyMvL\nQ1ZWFnJycsTnCIKAsrIyvPnmm/D09MR9992HGTNmYOjQoT0qVPssdEnOsSMiIhpw3QZ4ZmYmMjMz\nO70/NTUVGo1GDHcACA0NxbBhwxAQEAAAmDBhAs6cOdNtgKvV/gAAs/X76KggyLmdap+y1TH1L9Zz\n/2Md9z/WsbT1agx848aNiIqKQkZGBgoLCxESEiKGNwDExMSgubkZjY2N8PPzQ0FBAe67775uX7e6\nugkAoG3Rw1MpR22ttjfFo06o1f5iHVP/YT33P9Zx/2Md978rvUDqVYDPmzcPq1evxpYtW2AymbB2\n7VoAwIYNG5CWloaxY8fiqaeewqOPPgq5XI4ZM2YgMTGxx6+vN5jgyfFvIiKiTvUqwCMiIrB582an\n25cuXSp+PWbMGHzwwQe9KpTOYOIENiIioi5IcpaYTm+CikvIiIiIOiXNADeYOQOdiIioC5JLSbNZ\ngNFkZhc6ERFRFyQX4DrxKFEGOBERUWckG+BsgRMREXWOAU5EROSGpBfgegY4ERFRdyQX4HrrPuie\nnpIrGhERkWRILiXZhU5ERNQ9BjgREZEbkm6Acyc2IiKiTkk3wNkCJyIi6pTkAlzPWehERETdklyA\nswVORETUPQkGuGUZGQOciIiocxIMcNte6JIrGhERkWRILiU5C52IiKh7kgtwPcfAiYiIuiW5AOde\n6ERERN2TXoCzBU5ERNQtCQa4GUqFHHK5bKCLQkREJFmSC3C9wQQVZ6ATERF1SXJJqTOYOAOdiIio\nG9IMcI5/ExERdUmSAe7JACciIuqSpALcLAjQG8xsgRMREXVDUgFu4D7oREREPSKpAG9fAy6pYhER\nEUmOpJKyTW8EwH3QiYiIuiOpAG9o1gMAAnw9B7gkRERE0iatANdaAjzIVzXAJSEiIpI2SQV4vVYH\nAAj0YwuciIioK5IKcFsXepAfW+BERERdkVaAW7vQAzkGTkRE1CVJBXh9M7vQiYiIekJSAd6g1UPl\nqYCXp3Kgi0JERCRp0grwZj2C2H1ORETULckEeEubAU3NegRyAhsREVG3JBPgu46WQwAwKj54oItC\nREQkeZIJ8O8OlkAGYProqIEuChERkeRJJsBPFdchPsofoYFeA10UIiIiyZNMgJvMAmLUfgNdDCIi\nIrfQq/Va2dnZWL9+PWJjYwEA06dPx7Jly8T78/Pz8fzzz0Mmk0EQBBQVFeGNN95Aampql68bzQAn\nIiLqkV4vuJ47dy6ysrJc3pecnIx3330XANDU1IQVK1Z0G94AEK327W1xiIiIriv93oW+adMmLFq0\nqEePjQljgBMREfVErwM8NzcXS5YsweLFi1FQUODyMTqdDrt378bNN9/c7esNCvPlOeBEREQ91G0X\n+tatW7Ft2zZxPFsmkyEjIwMrV65Eeno68vLykJWVhZycHKfnfvPNN0hPT+9RQf62ahYa61su/ycg\nIiK6DskEQRCu9EVmzJiBnTt3QiaTOdy+atUqPPDAAxg/fvyVvgURERHZ6VUX+saNG/HZZ58BAAoL\nCxESEuIU3gBw/PhxJCUlXVkJiYiIyEmvZqHPmzcPq1evxpYtW2AymbB27VoAwIYNG5CWloaxY8cC\nALRaLXx8fPqutERERASgj7rQiYiI6OqSzE5sRERE1HMMcCIiIjfEACciInJDvd5KtS8999xzOHr0\nKGQyGX73u98hJSVloIvk1goLC/HYY4/h4YcfxsKFC1FRUYHVq1dDEASo1Wq8+OKL8PDwwCeffILN\nmzdDoVAgMzMT8+fPH+iiu40XX3wRhw8fhslkwtKlS5GSksI67kNtbW1Ys2YNamtrodfrsXz5ciQl\nJbGO+4FOp8Mdd9yBxx57DFOmTGEd96Hc3Fz86le/wvDhwyEIAhITE/Hoo4/2XR0LAyw3N1dYtmyZ\nIPJ8UF8AAAQ/SURBVAiCcPbsWeG+++4b4BK5t5aWFuHBBx8U/vjHPwr//ve/BUEQhDVr1gjbt28X\nBEEQXnnlFeH9998XWlpahFtvvVXQarVCW1ubcMcddwgNDQ0DWXS3sW/fPmHp0qWCIAiCRqMRZs6c\nKaxZs0b48ssvBUFgHfeFzz77TNi4caMgCIJQVlYmzJkzh3XcT1555RVh/vz5QnZ2Nj8r+tj+/fuF\nX/7ylw639WUdD3gX+t69e8WtVocOHYrGxkY0NzcPcKncl0qlwsaNGxEeHi7elpubi1mzZgEAZs2a\nhT179uDo0aMYM2YMfH19oVKpMH78eBw+fHigiu1WJk+ejPXr1wMAAgIC0NLSggMHDmD27NkAWMd9\nYe7cuXjkkUcAAOXl5YiKimId94Nz587h3LlzSE9PhyAIOHDgAD8r+pjQYaFXX34eD3iA19TUICQk\nRPw+ODgYNTU1A1gi9yaXy+Hp6binfGtrKzw8PAAAoaGhqKqqQm1trUO9h4SEoLq6+qqW1V3JZDJ4\neXkBALZt24aZM2eyjvvJggULkJWVhaeeeop13A9eeOEFrFmzRvyeddz3ioqKsGLFCixcuBB79uxB\nW1tbn9WxJMbA7XW8WqG+1Vn9st4v3zfffIP//ve/2LRpE+bMmSPezjruO1u2bMGpU6ewatUqh/pj\nHV+5jz76COPGjUN0dLTL+1nHVy4uLg6PP/44br/9dpSUlOChhx6C0WgU77/SOh7wAA8PD3docVdV\nVUGtVg9gia49vr6+0Ov18PT0RGVlJSIiIhAeHu5whVdZWYlx48YNYCndy86dO7FhwwZs2rQJfn5+\nrOM+lp+fj9DQUERGRiIpKQlms5l13Md++OEHlJaW4vvvv0dlZSU8PDzg4+PDOu5DERERuP322wEA\ngwcPRlhYGE6cONFndTzgXejTp0/H9u3bAVj+aCMiIrj9ah+bOnWqWMfbt2/HDTfcgDFjxuDEiRPQ\narVobm7GkSNHMGHChAEuqXvQarV46aWX8Pe//x3+/v4AWMd97cCBA/jnP/8JwDLM1tLSgqlTp+LL\nL78EwDruC3/5y1+wdetW/Oc//8H8+fPx2GOPsY77WE5Ojvh7XF1djdraWtx99919VseS2Er1lVde\nQW5uLhQKBf70pz8hMTFxoIvktvLz8/H888+jvLwcSqUSERERePnll7FmzRro9XoMGjQIzz33HBQK\nBb766its3LgRcrkcDz74IDIyMga6+G7hgw8+wGuvvYb4+HjxiN0XXngBv//971nHfUSn0+F3v/sd\nKioqoNPpsHLlSiQnJyMrK4t13A9ee+01xMTEYMaMGazjPtTc3Iwnn3wSTU1NMBqNePzxx5GUlITf\n/va3fVLHkghwIiIiujwD3oVOREREl48BTkRE5IYY4ERERG6IAU5EROSGGOBERERuiAFORETkhhjg\nREREbogBTkRE5Ib+P00iuPYIs0mkAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faa20c60da0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(v_params.elbo_vals)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we see the distribution of the images in the latent space. To do this, we make 2-dimensional points in a grid and feed them into the decoding network. The mean of $p(\\mathbf{x}|\\mathbf{z})$ is the image corresponding to the samples on the grid. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7faa1a963240>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nPgXKrYu8UjwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faa1febb5f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "zs = np.array([(z1, z2) \n",
    "               for z1 in np.arange(-1, 1, 0.2) \n",
    "               for z2 in np.arange(-1, 1, 0.2)]).astype('float32')\n",
    "xs = dec.decode(zs)[:, 0, :, :]\n",
    "xs = np.bmat([[xs[i + j * 10] for i in range(10)] for j in range(10)])\n",
    "matplotlib.rc('axes', **{'grid': False})\n",
    "plt.imshow(xs, interpolation='none', cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  },
  "nav_menu": {},
  "toc": {
   "navigate_menu": true,
   "number_sections": true,
   "sideBar": true,
   "threshold": 6,
   "toc_cell": false,
   "toc_section_display": "block",
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
